var searchIndex = {};
searchIndex["automaton_test"] = {"doc":"Project intended for incremental building of a state machine. The intention is to make every language item presented to the developer as explicit as possible. While still allowing some degree of dynamic flow. Only using safe code of-course!","items":[[3,"Machine","automaton_test","The state machine.",null,null],[12,"state","","Field to encode the current state of the machine.",0,null],[12,"transaction","","Field to store the provided Transaction object as rquired by the current state.",0,null],[12,"storage","","Stack storage service to allow PushDown and Pullup behaviour to be implemented.",0,null],[0,"function","","Contains the core functionality items for our system.",null,null],[0,"error","automaton_test::function","Types, to be used within the system, providing context of unexpected behaviour.",null,null],[3,"MachineError","automaton_test::function::error","User facing error type indicating an issue ocurred during evalutation of any state machine processes.",null,null],[3,"RuntimeConstraintError","","Type used for indicating failure to meet specified constraints.",null,null],[4,"ErrorKind","","Enumeration of publicl cases of state machine failures.",null,null],[13,"ConstraintError","","Error indicating some constraint failed to assert at runtime.",1,null],[13,"LogicError","","Error indicating the developer has introduced a logic error in his code.",1,null],[8,"SnapshottedErrorExt","","Trait facilitating error creation with a snapshot of the state machine attached.",null,null],[10,"context","","Converts the Error type of a [`Result`] object into a [`MachineError`].",2,{"inputs":[{"name":"self"},{"name":"errorkind"},{"name":"m"}],"output":{"generics":["machineerror"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cause","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cause","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",4,null],[0,"helper","automaton_test::function","Core functionality helper methods.",null,null],[5,"pack_transaction","automaton_test::function::helper","Transform a transaction into the wrapping variant.",null,{"inputs":[{"name":"t"}],"output":{"name":"tc"}}],[5,"unpack_transaction","","Unpack a wrapped transaction into an owned value.",null,{"inputs":[{"name":"tc"}],"output":{"name":"result"}}],[8,"StateContainer","automaton_test::function","Trait generalizing over any structure that could act as a container of states.",null,null],[16,"State","","Type of the current state held by the state machine.",5,null],[8,"State","","Trait generalizing over any state that's present in the state machine.",null,null],[16,"Transaction","","Type of structure which must be provided when transitioning into the state represented by the enclosing type.",6,null],[8,"ServiceCompliance","","Trait for implementing a certain service on the state machine.",null,null],[10,"get","","Retrieves an immutable reference to service `S`.",7,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[10,"get_mut","","Retrieves a mutable reference to service `S`.",7,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[0,"marker","automaton_test","Primitive traits which can be used as constraints by the core components.",null,null],[8,"Transaction","automaton_test::marker","Types used to transition between state machine States.",null,null],[8,"TransactionContainer","","Types which generalize multiple transactions into 1 [`Sized`] structure so the transactions themselves can be safely stored in memory.",null,null],[8,"Service","","Types which attribute functionality to state machines.",null,null],[8,"TopLevelMarker","","(State) Types which are directly contained by the state machine.",null,null],[8,"WaitableMarker","","(State) Types which represent a condition for when the state machine itself should resume execution.",null,null],[8,"ActionableMarker","","(State) Types which represent a condition for when the state machine itself should resume execution.",null,null],[0,"stm","automaton_test","Traits enforcing state machine behaviour.",null,null],[8,"TransitionFrom","automaton_test::stm","Types, state machines residing in a certain state, which transform one-sided into a next Type.",null,null],[10,"transition_from","","Transition from the provided state into the implementing state.",8,null],[8,"PushdownFrom","","Types, state machines residing in a certain state, which transform one-sided into a next Type. The Transaction object of the previous state is stored for re-use.",null,null],[10,"pushdown_from","","Transition from the provided state into the implementing state.",9,null],[8,"PullupFrom","","Types, state machines residing in a certain state, which transform one-sided into a previous Type. The Transaction object of the next state is loaded and restored.",null,null],[10,"pullup_from","","Transition from the provided state into the implementing state.",10,{"inputs":[{"name":"t"}],"output":{"generics":["machineerror"],"name":"result"}}],[0,"service","automaton_test","Types which attribute functionality to state machines.",null,null],[3,"StackStorage","automaton_test::service","Structure wrapping a Vector type to provide a simple Stack interface.",null,null],[12,"tape","","Backing storage for the emulated Stack functionality.",11,null],[0,"error","","Types for simplifying error handling syntax.",null,null],[3,"StackPopError","automaton_test::service::error","Specific error thrown when the [`StackStorage`] has no items left and the users coded it to pop another item.",null,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","automaton_test::service","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"stackstorage"}}],[11,"push","","Add the provided value onto the top of the Stack.",11,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"pop","","Remove the element from the top of the Stack.",11,{"inputs":[{"name":"self"}],"output":{"generics":["stackpoperror"],"name":"result"}}],[0,"state","automaton_test","Types which encode the states to be used by a state machine.",null,null],[3,"Wait","automaton_test::state","State indicating a pause until an input event has been generated.",null,null],[3,"Start","","Wait condition state until the game has been started.",null,null],[3,"Input","","Wait condition state until the user has provided input.",null,null],[3,"Action","","State indicating dynamic execution of the specific action is in progress.",null,null],[3,"Load","","Action condition state indicating loading is in progress.",null,null],[3,"Print","","Action condition state indicating printing is in progress.",null,null],[3,"Finished","","State indicating finalization of the state machine.",null,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"start"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"input"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"action"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"load"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"print"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"finished"}}],[0,"transaction","automaton_test","Types used to convey transition related information.",null,null],[3,"Epsilon","automaton_test::transaction","Empty Transaction object.",null,null],[3,"PrintTransaction","","Transaction to be received by states with printing behaviour.",null,null],[12,"0","","",20,null],[4,"TransactionItem","","Collection of known Transaction structures wrapped into a Sized item.",null,null],[13,"Epsilon","","See [`Epsilon`]",21,null],[13,"Print","","See [`PrintTransaction`]",21,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"transactionitem"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"epsilon"}}],[11,"from","","",21,{"inputs":[{"name":"epsilon"}],"output":{"name":"self"}}],[11,"try_from","","",22,{"inputs":[{"name":"transactionitem"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"printtransaction"}}],[11,"from","","",21,{"inputs":[{"name":"printtransaction"}],"output":{"name":"self"}}],[11,"try_from","","",20,{"inputs":[{"name":"transactionitem"}],"output":{"name":"result"}}],[11,"fmt","automaton_test","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"machine"}}],[11,"get","","",0,{"inputs":[{"name":"self"}],"output":{"name":"stackstorage"}}],[11,"get_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"stackstorage"}}],[11,"transition_from","","",0,null],[11,"transition_from","","",0,null],[11,"pushdown_from","","",0,null],[11,"pullup_from","","",0,{"inputs":[{"generics":["action"],"name":"machine"}],"output":{"generics":["machineerror"],"name":"result"}}],[11,"pushdown_from","","",0,null],[11,"pullup_from","","",0,{"inputs":[{"generics":["action"],"name":"machine"}],"output":{"generics":["machineerror"],"name":"result"}}]],"paths":[[3,"Machine"],[4,"ErrorKind"],[8,"SnapshottedErrorExt"],[3,"MachineError"],[3,"RuntimeConstraintError"],[8,"StateContainer"],[8,"State"],[8,"ServiceCompliance"],[8,"TransitionFrom"],[8,"PushdownFrom"],[8,"PullupFrom"],[3,"StackStorage"],[3,"StackPopError"],[3,"Wait"],[3,"Start"],[3,"Input"],[3,"Action"],[3,"Load"],[3,"Print"],[3,"Finished"],[3,"PrintTransaction"],[4,"TransactionItem"],[3,"Epsilon"]]};
searchIndex["main"] = {"doc":"","items":[],"paths":[]};
initSearch(searchIndex);
